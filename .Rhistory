library(devtools)
devtools::document()
> devtools::document()
devtools::document()
mkdir mSHIFT/vignettes
library(mSHIFT)
library(mSHIFT)
sample_data <- load_sample_data()
run_mSHIFT_simulation(
data = sample_data,
reductions = c(0, 50, 100),
start_seed = 1,
end_seed = 5,
red_meat = TRUE,
processed_meat = TRUE,
years = 10,
test_mode = TRUE
)
run_sim(
data = sample_data,
reductions = c(0, 50, 100),
start_seed = 1,
end_seed = 5,
red_meat = TRUE,
processed_meat = TRUE,
years = 10,
test_mode = TRUE
)
run_sim(
data = sample_data,
reductions = c(0, 50, 100),
start_seed = 1,
end_seed = 5,
red_meat = TRUE,
processed_meat = TRUE,
years = 10,
test_mode = TRUE
)
library(mSHIFT)
run_sim(
data = sample_data,
reductions = c(0, 50, 100),
start_seed = 1,
end_seed = 5,
red_meat = TRUE,
processed_meat = TRUE,
years = 10,
test_mode = TRUE
)
install.packages("mSHIFT")
library(mSHIFT)
devtools::install_github("axvonder/mSHIFTpachyderm")
library(mSHIFT)
sample_data <- load_sample_data()
run_sim(
data = sample_data,
reductions = c(0, 50, 100),
start_seed = 1,
end_seed = 5,
red_meat = TRUE,
processed_meat = TRUE,
years = 10,
test_mode = TRUE
)
# Specify reduction scenarios (as percentages within a vector)
reductions <- c(0, 50, 100)
# Set the number of random seeds
start_seed <- 1
end_seed <- 5
# Specify whether to reduce red meat and/or processed meat
red_meat <- TRUE
processed_meat <- TRUE
# Set test mode (TRUE for testing with a small dataset)
test_mode <- TRUE
# Set the number of years to run the simulation
years <- 10
# Specify diseases to analyze
diseases <- c('diabetes', 'CVD', 'CRC')
# Specify whether to analyze mortalities (if set to FALSE, only incident cases will be analyzed)
mortalities <- FALSE
# Specify whether to apply demographic filters in analysis
with_filter <- FALSE
# Run the simulation
run_sim(
dat = dat,
reductions = reductions,
start_seed = start_seed,
end_seed = end_seed,
red_meat = red_meat,
processed_meat = processed_meat,
years = years,
test_mode = test_mode
)
# Run the simulation
run_sim(
dat = sample_data,
reductions = reductions,
start_seed = start_seed,
end_seed = end_seed,
red_meat = red_meat,
processed_meat = processed_meat,
years = years,
test_mode = test_mode
)
if (test_mode) {
data_dir <- 'Output/Tests/'
} else {
data_dir <- 'Output/Final/'
}
# Run the analysis
run_analysis(
diseases = diseases,
reductions = reductions,
red_meat = red_meat,
processed_meat = processed_meat,
mortalities = mortalities,
years = years,
data_dir = data_dir,
with_filter = with_filter,
start_seed = start_seed,
end_seed = end_seed,
test_mode = test_mode
)
devtools::document()
devtools::check()
devtools::install_github("axvonder/mSHIFTpachyderm", force = TRUE)
library(mSHIFT)
sample_data <- load_sample_data()
#set working directory (where it will save outputs)
setwd("~/Desktop")
sample_data <- load_sample_data()
# Specify reduction scenarios (as percentages)
reductions <- c(0, 50, 100)
# Set the number of random seeds
start_seed <- 1
end_seed <- 5
# Specify whether to reduce red meat and/or processed meat
red_meat <- TRUE
processed_meat <- TRUE
# Set test mode (TRUE for testing with a small dataset)
test_mode <- TRUE
# Set the number of years to run the simulation
years <- 10
# Specify diseases to analyze
diseases <- c('diabetes', 'CVD', 'CRC')
# Specify whether to analyze mortalities (FALSE analyzes incident cases)
mortalities <- FALSE
# Specify whether to apply demographic filters in analysis
with_filter <- FALSE
# Set the data directory for outputs
if (test_mode) {
data_dir <- 'Output/Tests/'
} else {
data_dir <- 'Output/Final/'
}
run_sim(
dat = sample_data,
reductions = reductions,
start_seed = start_seed,
end_seed = end_seed,
red_meat = red_meat,
processed_meat = processed_meat,
years = years,
test_mode = test_mode
)
run_analysis(
diseases = diseases,
reductions = reductions,
red_meat = red_meat,
processed_meat = processed_meat,
mortalities = mortalities,
years = years,
data_dir = data_dir,
with_filter = with_filter,
start_seed = start_seed,
end_seed = end_seed,
test_mode = test_mode
)
setwd("~/University of Edinburgh/NDNS Meat Trends - General/Data")
library(dplyr)
dat <- read.csv("ndns_rp_yr9-11a_personleveldietarydata_uk_20210831.csv")
View(dat)
View(dat)
yr9 <- read.csv("ndns_rp_yr9a_foodleveldietarydata_uk_20210831.csv")
yr10 <- read.csv("ndns_rp_yr10a_foodleveldietarydata_uk_20210831.csv")
yr11 <- read.csv("ndns_rp_yr11a_foodleveldietarydata_uk_20210831.csv")
View(yr9)
ZZZ <- yr9 %>% select(seriali, SubFoodGroupCode) %>% filter(SubFoodGroupCode == "32A")
View(ZZZ)
ZZZ <- yr9 %>% select(seriali, FoodName, SubFoodGroupCode) %>% filter(SubFoodGroupCode == "32A")
View(ZZZ)
# Function to create 32Agrams variable and collapse by seriali
process_df <- function(df) {
df %>%
# Create the 32Agrams variable
mutate(`32Agrams` = ifelse(SubFoodGroupCode == "32A", TotalGrams, 0)) %>%
# Select relevant variables
select(seriali, TotalGrams, `32Agrams`) %>%
# Collapse by seriali (sum the values)
group_by(seriali) %>%
summarise(TotalGrams = sum(TotalGrams, na.rm = TRUE),
`32Agrams` = sum(`32Agrams`, na.rm = TRUE))
}
# Process each data frame
yr9_processed <- process_df(yr9)
yr10_processed <- process_df(yr10)
yr11_processed <- process_df(yr11)
# Merge the data frames by seriali
merged_df <- reduce(list(yr9_processed, yr10_processed, yr11_processed), full_join, by = "seriali")
library(dplyr)
# Merge the data frames by seriali
merged_df <- reduce(list(yr9_processed, yr10_processed, yr11_processed), full_join, by = "seriali")
library(purrr)
# Merge the data frames by seriali
merged_df <- reduce(list(yr9_processed, yr10_processed, yr11_processed), full_join, by = "seriali")
# Calculate the number of seriali where 32Agrams > 0
count_32Agrams_gt_zero <- merged_df %>%
filter(`32Agrams` > 0) %>%
nrow()
# Calculate % 32Agrams of total grams consumed across the dataset
total_grams_sum <- sum(merged_df$TotalGrams, na.rm = TRUE)
total_32Agrams_sum <- sum(merged_df$`32Agrams`, na.rm = TRUE)
percentage_32Agrams <- (total_32Agrams_sum / total_grams_sum) * 100
# Output results
cat("Number of seriali where 32Agrams > 0:", count_32Agrams_gt_zero, "\n")
cat("Percentage of 32Agrams of total grams consumed:", percentage_32Agrams, "%")
View(merged_df)
colnames(merged_df)
# Bind the data frames together
merged_df <- bind_rows(yr9_processed, yr10_processed, yr11_processed) %>%
group_by(seriali) %>%
summarise(TotalGrams = sum(TotalGrams, na.rm = TRUE),
`32Agrams` = sum(`32Agrams`, na.rm = TRUE))
# Calculate the number of seriali where 32Agrams > 0
count_32Agrams_gt_zero <- merged_df %>%
filter(`32Agrams` > 0) %>%
nrow()
# Calculate % 32Agrams of total grams consumed across the dataset
total_grams_sum <- sum(merged_df$TotalGrams, na.rm = TRUE)
total_32Agrams_sum <- sum(merged_df$`32Agrams`, na.rm = TRUE)
percentage_32Agrams <- (total_32Agrams_sum / total_grams_sum) * 100
# Output results
cat("Number of seriali where 32Agrams > 0:", count_32Agrams_gt_zero, "\n")
cat("Percentage of 32Agrams of total grams consumed:", percentage_32Agrams, "%")
View(merged_df)
View(dat)
# Merge 32Agrams from merged_df into dat by seriali
dat <- left_join(dat, merged_df %>% select(seriali, `32Agrams`), by = "seriali")
# Load required libraries
library(survey)
library(srvyr)  # for working with survey designs in a tidyverse style
# Specify survey weighting structure for cross-sectional analysis
survey_design <- dat %>%
as_survey_design(ids = serialh / area, weights = wti, strata = astrata5)
hh <- read.csv("ndns_rp_yr9-11a_hhold_20210831.csv")
View(hh)
# Merge serialh from hh into dat by seriali
dat <- left_join(dat, hh %>% select(seriali, serialh), by = "seriali")
# Specify survey weighting structure for cross-sectional analysis
survey_design <- dat %>%
as_survey_design(ids = serialh / area, weights = wti_911, strata = astrata5)
# Specify survey weighting structure for cross-sectional analysis
survey_design <- dat %>%
as_survey_design(ids = serialh / Area, weights = wti_911, strata = astrata5)
hh <- read.csv("ndns_rp_yr9-11a_indiv_20211020.csv")
library(dplyr)
library(purrr)
setwd("~/University of Edinburgh/NDNS Meat Trends - General/Data")
dat <- read.csv("ndns_rp_yr9-11a_personleveldietarydata_uk_20210831.csv")
yr9 <- read.csv("ndns_rp_yr9a_foodleveldietarydata_uk_20210831.csv")
yr10 <- read.csv("ndns_rp_yr10a_foodleveldietarydata_uk_20210831.csv")
yr11 <- read.csv("ndns_rp_yr11a_foodleveldietarydata_uk_20210831.csv")
hh <- read.csv("ndns_rp_yr9-11a_indiv_20211020.csv")
ZZZ <- yr9 %>% select(seriali, FoodName, SubFoodGroupCode) %>% filter(SubFoodGroupCode == "32A")
# Function to create 32Agrams variable and collapse by seriali
process_df <- function(df) {
df %>%
# Create the 32Agrams variable
mutate(`32Agrams` = ifelse(SubFoodGroupCode == "32A", TotalGrams, 0)) %>%
# Select relevant variables
select(seriali, TotalGrams, `32Agrams`) %>%
# Collapse by seriali (sum the values)
group_by(seriali) %>%
summarise(TotalGrams = sum(TotalGrams, na.rm = TRUE),
`32Agrams` = sum(`32Agrams`, na.rm = TRUE))
}
# Process each data frame
yr9_processed <- process_df(yr9)
yr10_processed <- process_df(yr10)
yr11_processed <- process_df(yr11)
# Bind the data frames together
merged_df <- bind_rows(yr9_processed, yr10_processed, yr11_processed) %>%
group_by(seriali) %>%
summarise(TotalGrams = sum(TotalGrams, na.rm = TRUE),
`32Agrams` = sum(`32Agrams`, na.rm = TRUE))
# Merge 32Agrams from merged_df into dat by seriali
dat <- left_join(dat, merged_df %>% select(seriali, `32Agrams`), by = "seriali")
# Merge serialh from hh into dat by seriali
dat <- left_join(dat, hh %>% select(seriali, serialh, Area, wti_Y911, astrata5), by = "seriali")
# Specify survey weighting structure for cross-sectional analysis
survey_design <- dat %>%
as_survey_design(ids = serialh / Area, weights = wti_911, strata = astrata5)
# Specify survey weighting structure for cross-sectional analysis
survey_design <- dat %>%
as_survey_design(ids = serialh / Area, weights = wti_Y911, strata = astrata5)
# Adjust the degrees of freedom for strata with a single PSU
options(survey.lonely.psu = "adjust")
# Calculate the number of people with 32Agrams > 0
people_gt_zero_32A <- survey_design %>%
filter(`32Agrams` > 0) %>%
summarise(count = survey_total())
cat("Number of people with 32Agrams > 0 (weighted):", people_gt_zero_32A$count, "\n")
# Calculate weighted total of TotalGrams and 32Agrams
weighted_totals <- survey_design %>%
summarise(
total_TotalGrams = survey_total(TotalGrams, na.rm = TRUE),
total_32Agrams = survey_total(`32Agrams`, na.rm = TRUE)
)
# Function to create 32Agrams variable and collapse by seriali
process_df <- function(df) {
df %>%
# Create the 32Agrams variable
mutate(`32Agrams` = ifelse(SubFoodGroupCode == "32A", TotalGrams, 0)) %>%
# Select relevant variables
select(seriali, TotalGrams, `32Agrams`) %>%
# Collapse by seriali (sum the values)
group_by(seriali) %>%
summarise(TotalGrams = sum(TotalGrams, na.rm = TRUE),
`32Agrams` = sum(`32Agrams`, na.rm = TRUE))
}
# Process each data frame
yr9_processed <- process_df(yr9)
yr10_processed <- process_df(yr10)
yr11_processed <- process_df(yr11)
# Bind the data frames together
merged_df <- bind_rows(yr9_processed, yr10_processed, yr11_processed) %>%
group_by(seriali) %>%
summarise(TotalGrams = sum(TotalGrams, na.rm = TRUE),
`32Agrams` = sum(`32Agrams`, na.rm = TRUE))
# Merge 32Agrams from merged_df into dat by seriali
dat <- left_join(dat, merged_df %>% select(seriali, `32Agrams`, TotalGrams), by = "seriali")
# Merge serialh from hh into dat by seriali
dat <- left_join(dat, hh %>% select(seriali, serialh, Area, wti_Y911, astrata5), by = "seriali")
# Specify survey weighting structure for cross-sectional analysis
survey_design <- dat %>%
as_survey_design(ids = serialh / Area, weights = wti_Y911, strata = astrata5)
# Adjust the degrees of freedom for strata with a single PSU
options(survey.lonely.psu = "adjust")
library(dplyr)
library(purrr)
library(survey)
library(srvyr)
setwd("~/University of Edinburgh/NDNS Meat Trends - General/Data")
dat <- read.csv("ndns_rp_yr9-11a_personleveldietarydata_uk_20210831.csv")
yr9 <- read.csv("ndns_rp_yr9a_foodleveldietarydata_uk_20210831.csv")
yr10 <- read.csv("ndns_rp_yr10a_foodleveldietarydata_uk_20210831.csv")
yr11 <- read.csv("ndns_rp_yr11a_foodleveldietarydata_uk_20210831.csv")
hh <- read.csv("ndns_rp_yr9-11a_indiv_20211020.csv")
ZZZ <- yr9 %>% select(seriali, FoodName, SubFoodGroupCode) %>% filter(SubFoodGroupCode == "32A")
# Function to create 32Agrams variable and collapse by seriali
process_df <- function(df) {
df %>%
# Create the 32Agrams variable
mutate(`32Agrams` = ifelse(SubFoodGroupCode == "32A", TotalGrams, 0)) %>%
# Select relevant variables
select(seriali, TotalGrams, `32Agrams`) %>%
# Collapse by seriali (sum the values)
group_by(seriali) %>%
summarise(TotalGrams = sum(TotalGrams, na.rm = TRUE),
`32Agrams` = sum(`32Agrams`, na.rm = TRUE))
}
# Process each data frame
yr9_processed <- process_df(yr9)
yr10_processed <- process_df(yr10)
yr11_processed <- process_df(yr11)
# Bind the data frames together
merged_df <- bind_rows(yr9_processed, yr10_processed, yr11_processed) %>%
group_by(seriali) %>%
summarise(TotalGrams = sum(TotalGrams, na.rm = TRUE),
`32Agrams` = sum(`32Agrams`, na.rm = TRUE))
# Merge 32Agrams from merged_df into dat by seriali
dat <- left_join(dat, merged_df %>% select(seriali, `32Agrams`, TotalGrams), by = "seriali")
# Merge serialh from hh into dat by seriali
dat <- left_join(dat, hh %>% select(seriali, serialh, Area, wti_Y911, astrata5), by = "seriali")
# Specify survey weighting structure for cross-sectional analysis
survey_design <- dat %>%
as_survey_design(ids = serialh / Area, weights = wti_Y911, strata = astrata5)
# Adjust the degrees of freedom for strata with a single PSU
options(survey.lonely.psu = "adjust")
# Calculate the number of people with 32Agrams > 0
people_gt_zero_32A <- survey_design %>%
filter(`32Agrams` > 0) %>%
summarise(count = survey_total())
cat("Number of people with 32Agrams > 0 (weighted):", people_gt_zero_32A$count, "\n")
# Calculate weighted total of TotalGrams and 32Agrams
weighted_totals <- survey_design %>%
summarise(
total_TotalGrams = survey_total(TotalGrams, na.rm = TRUE),
total_32Agrams = survey_total(`32Agrams`, na.rm = TRUE)
)
# Calculate the percentage of 32Agrams out of TotalGrams
percentage_32Agrams_weighted <- (weighted_totals$total_32Agrams / weighted_totals$total_TotalGrams) * 100
cat("Percentage of 32Agrams of total grams consumed (weighted):", percentage_32Agrams_weighted, "%")
387.5367/3558
library(dplyr)
library(purrr)
library(survey)
library(srvyr)
setwd("~/University of Edinburgh/NDNS Meat Trends - General/Data")
dat <- read.csv("ndns_rp_yr9-11a_personleveldietarydata_uk_20210831.csv")
yr9 <- read.csv("ndns_rp_yr9a_foodleveldietarydata_uk_20210831.csv")
yr10 <- read.csv("ndns_rp_yr10a_foodleveldietarydata_uk_20210831.csv")
yr11 <- read.csv("ndns_rp_yr11a_foodleveldietarydata_uk_20210831.csv")
hh <- read.csv("ndns_rp_yr9-11a_indiv_20211020.csv")
ZZZ <- yr9 %>% select(seriali, FoodName, SubFoodGroupCode) %>% filter(SubFoodGroupCode == "32A")
# Function to create 32Agrams variable and collapse by seriali
process_df <- function(df) {
df %>%
# Create the 32Agrams variable
mutate(`32Agrams` = ifelse(SubFoodGroupCode == "32A", TotalGrams, 0)) %>%
# Select relevant variables
select(seriali, TotalGrams, `32Agrams`) %>%
# Collapse by seriali (sum the values)
group_by(seriali) %>%
summarise(TotalGrams = sum(TotalGrams, na.rm = TRUE),
`32Agrams` = sum(`32Agrams`, na.rm = TRUE))
}
# Process each data frame
yr9_processed <- process_df(yr9)
yr10_processed <- process_df(yr10)
yr11_processed <- process_df(yr11)
# Bind the data frames together
merged_df <- bind_rows(yr9_processed, yr10_processed, yr11_processed) %>%
group_by(seriali) %>%
summarise(TotalGrams = sum(TotalGrams, na.rm = TRUE),
`32Agrams` = sum(`32Agrams`, na.rm = TRUE))
# Merge 32Agrams from merged_df into dat by seriali
dat <- left_join(dat, merged_df %>% select(seriali, `32Agrams`, TotalGrams), by = "seriali")
# Merge serialh from hh into dat by seriali
dat <- left_join(dat, hh %>% select(seriali, serialh, Area, wti_Y911, astrata5), by = "seriali")
# Specify survey weighting structure for cross-sectional analysis
survey_design <- dat %>%
as_survey_design(ids = serialh / Area, weights = wti_Y911, strata = astrata5)
# Adjust the degrees of freedom for strata with a single PSU
options(survey.lonely.psu = "adjust")
# Calculate the number of people with 32Agrams > 0
people_gt_zero_32A <- survey_design %>%
filter(`32Agrams` > 0) %>%
summarise(count = survey_total())
cat("Number of people with 32Agrams > 0 (weighted):", people_gt_zero_32A$count, "\n")
# Calculate weighted total of TotalGrams and 32Agrams
weighted_totals <- survey_design %>%
summarise(
total_TotalGrams = survey_total(TotalGrams, na.rm = TRUE),
total_32Agrams = survey_total(`32Agrams`, na.rm = TRUE)
)
# Calculate the percentage of 32Agrams out of TotalGrams
percentage_32Agrams_weighted <- (weighted_totals$total_32Agrams / weighted_totals$total_TotalGrams) * 100
cat("Percentage of 32Agrams of total grams consumed (weighted):", percentage_32Agrams_weighted, "%")
387.5367/3558
View(yr9)
ZZZ <- yr9 %>%
filter(grepl("LASAG", FoodName, ignore.case = TRUE))
View(ZZZ)
ZZZ <- yr9 %>%
filter(grepl("LASAGNE HOMEMADE", FoodName, ignore.case = TRUE))
View(ZZZ)
